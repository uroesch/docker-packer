#!/usr/bin/env bash

# -----------------------------------------------------------------------------
# Setup
# -----------------------------------------------------------------------------
set -o errexit
set -o nounset
set -o pipefail

trap cleanup EXIT

# -----------------------------------------------------------------------------
# Globals
# -----------------------------------------------------------------------------
declare -r SCRIPT=${0##*/}
declare -r AUTHOR="Urs Roesch"
declare -r VERSION=0.5.0
declare -r LICENSE=MIT
declare -r DOCKER_IMAGE=uroesch/packer:latest
declare -g BUILD_DIR=${BUILD_DIR:-$(pwd)}
declare -g TMP_DIR="${BUILD_DIR}/tmp/${RANDOM}-${RANDOM}"
declare -g TTY=
declare -g INTERACTIVE=
declare -i NOVNC_PREFIX=111
declare -i NOVNC_PORT=${NOVNC_PREFIX}80
declare -i TRIES=10
declare -i SLEEP=15
declare -i ABORT_AFTER=$(( $(date +%s) + 60 * 5 ))

# -----------------------------------------------------------------------------
# Functions
# -----------------------------------------------------------------------------
function usage() {
  local exit_code=${1:-1}
  cat <<USAGE

  Usage:
    ${SCRIPT} [-h|-V] | command

  Options:
    -h | --help         This message
    -V | --version      Display version and exit

  Descriptions:
    Wrapper script for use with docker.io/uroesch/packer container.
    Mounts the current working directory 'iso', 'images', 'artifacts'
    into the docker container and runs the provided command as
    pass through inside the container.

USAGE
  exit ${exit_code}
}

function parse_options() {
  while (( ${#} > 0 )); do
    case "${1}" in
    -V|--version) version;;
    -h|--help)    usage 0;;
    esac
    shift
  done
}

function version() {
  printf "%s v%s\nCopyright (c) %s\nLicense - %s\n" \
    "${SCRIPT}" "${VERSION}" "${AUTHOR}" "${LICENSE}"
  exit 0
}

function has_tty() {
  [[ ! -t 1 ]] && return 0
  TTY=true
  INTERACTIVE=true
}

function certs_dir() {
  # find the certs directory and mount it on the container
  for dir in /etc/{ssl/certs,pki/tls/certs}; do
    if [[ -d ${dir} ]]; then
      echo ${dir}
      return 0
    fi
  done
}

function create_build_environment() {
  [[ -d ${TMP_DIR} ]] || mkdir -p "${TMP_DIR}"
}

function check_instance() {
  docker ps
}

function find_novnc_port() {
  while true; do
    [[ -z $(ss -Hlnt "sport = ${NOVNC_PORT}") ]] && return 0
    NOVNC_PORT+=1
  done
}

function run_docker() {
  find_novnc_port
  docker run \
    --rm \
    ${TTY:+--tty} \
    ${INTERACTIVE:+--interactive} \
    --privileged \
    --volume "$(pwd):$(pwd)" \
    --volume "${BUILD_DIR}/iso:$(pwd)/iso" \
    --volume "${BUILD_DIR}/images:$(pwd)/images" \
    --volume "${TMP_DIR}:$(pwd)/artifacts" \
    --volume "$(certs_dir):/etc/ssl/certs" \
    --workdir "$(pwd)" \
    --expose 5900-5999 \
    --publish ${NOVNC_PORT}:${NOVNC_PORT} \
    --env NOVNC_PORT="${NOVNC_PORT}" \
    --env USER_NAME="$(id -un)" \
    --env USER_UID="$(id -u)" \
    --env USER_GID="$(id -g)" \
    ${DOCKER_IMAGE} \
    "${@}"
}

function cleanup {
  [[ -d ${TMP_DIR} ]] && rm -rf ${TMP_DIR}
}

# -----------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------
parse_options "${@}"
has_tty
create_build_environment
# try a few times and abort after a few times
# or after time threshold
while (( ${TRIES} > 0 )); do
  run_docker "${@}" && exit 0 || :
  (( TRIES-- ))
  (( $(date +%s) > ${ABORT_AFTER} )) && exit 123
  sleep ${SLEEP}
done
